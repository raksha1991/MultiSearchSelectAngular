{"version":3,"file":"multi-select-search-angular2.js","sources":["ng://multi-select-search-angular2/lib/multi-select-search-angular2.component.ts","ng://multi-select-search-angular2/lib/multi-select-search-angular2.module.ts"],"sourcesContent":["import { Component,\n          OnInit, OnChanges,\n          ViewChild,\n          ElementRef,\n          Output,\n          EventEmitter,\n          Input,\n          SimpleChanges,\n          ViewEncapsulation } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable, BehaviorSubject, combineLatest } from 'rxjs';\nimport { MatAutocompleteTrigger } from '@angular/material';\nimport { startWith, map, distinctUntilChanged } from 'rxjs/operators';\n\n@Component({\n  selector: 'multi-select-search',\n  templateUrl: './multi-select-search-angular2.component.html',\n  styleUrls: ['./multi-select-search-angular2.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class MultiSelectSearchAngular2Component implements OnInit , OnChanges {\n  searchContrl = new FormControl();\n  private autoCompleteContrl = new FormControl();\n  filteredOptions$: Observable<string[]>;\n  selectedOptions$ = new BehaviorSubject<string[]>([]);\n  autoCompleteData$ = new BehaviorSubject<Array<string>>([]);\n\n  @ViewChild('searchInput', null) searchInput: ElementRef<HTMLInputElement>;\n  @ViewChild('searchInput', { read: MatAutocompleteTrigger, static: true }) autoComplete: MatAutocompleteTrigger;\n\n  @Output()\n  liveChange: EventEmitter<string[]> = new EventEmitter<string[]>();\n\n  @Input()\n  dataSource;\n\n  constructor() { }\n\n  ngOnInit() {\n    this.filteredOptions$ = combineLatest(\n      this.searchContrl.valueChanges.pipe(startWith('')),\n      this.autoCompleteData$\n      .pipe(startWith([]))\n      .pipe(distinctUntilChanged((a, b) => a.join(',') === b.join(',')))\n    )\n    .pipe(map(([searchValue, data]) => this._filter(searchValue, data)));\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.dataSource.currentValue) {\n      const data = [...new Set(changes.dataSource.currentValue)];\n      this.autoCompleteData$.next(data.filter(d => d !== null) as string[]);\n    }\n  }\n  /**\n   * Method to all clear the filter values\n   */\n  public clearFilter(): void {\n    this.searchContrl.setValue('');\n    this.selectedOptions$.next([]);\n    this.liveChange.emit([]);\n  }\n  /**\n   * Method to remove an item from filter\n   * @param option - filter string to be removed\n   */\n  private remove(option: string): void {\n    const selectedOptions = this.selectedOptionsValue.filter(o => o !== option);\n    this.selectedOptions$.next(selectedOptions);\n    this.liveChange.emit(selectedOptions);\n  }\n  /**\n   * Method to add filter to existing filter string\n   * @param option - filter string to be added\n   */\n  private add(option: string): void {\n    const selectedOptions = this.selectedOptionsValue;\n    selectedOptions.push(option);\n    this.selectedOptions$.next(selectedOptions);\n    this.liveChange.emit(selectedOptions);\n  }\n  /**\n   * Handler for select/deselect/select-all of items from suggestions\n   * @param selectedValue - selected/deselected value\n   */\n  onOptionSelectionChange(selectedValue: string): void {\n    if (selectedValue === 'All') {\n      this.selectedOptionsValue.length === this.autoCompleteData$.getValue().length ?\n      this.selectedOptions$.next([]) : this.selectedOptions$.next(this.autoCompleteData$.getValue());\n      this.liveChange.emit(this.selectedOptionsValue);\n    } else {\n      const newOption = selectedValue;\n      this.selectedOptionsValue.includes(newOption) ? this.remove(newOption) : this.add(newOption);\n    }\n    this.searchContrl.setValue('');\n    this.searchInput.nativeElement.blur();\n    this.autoComplete.closePanel();\n    // setTimeout(() => {\n    //   this.autoComplete.openPanel();\n    // });\n  }\n  /**\n   * Clear search field on focus out without changing searchform control\n   */\n  _setFocus(isFocussed) {\n    if (!isFocussed && !this.autoComplete.panelOpen) {\n      this.searchContrl.setValue(null);\n    }\n  }\n  /**\n   * Getter for selected options\n   */\n  get selectedOptionsValue() {\n    return this.selectedOptions$.getValue();\n  }\n  /**\n   * Utility method for filtering the suggestions based on typed value\n   * @param value - typed value\n   * @param searchData - datasource\n   */\n  private _filter(value: string, searchData: Array<string>): string[] {\n    let allData = searchData;\n    if (this.selectedOptionsValue.length) {\n      // showing all selected values first followed by unselected values\n      const selected = searchData.filter(data => this.selectedOptionsValue.includes(data));\n      const unselected = searchData.filter(data => !selected.includes(data));\n      allData = selected.concat(unselected);\n    }\n    if (value) {\n      const filterValue = value.toString().toLowerCase();\n      return allData.filter(option => {\n        return option.toString().toLowerCase().includes(filterValue);\n      });\n     } else {\n      return allData;\n     }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { MultiSelectSearchAngular2Component } from './multi-select-search-angular2.component';\nimport { CommonModule } from '@angular/common';\nimport {MatIconModule,\n  MatCheckboxModule,\n  MatFormFieldModule,\n  MatListModule,\n  MatInputModule,\n  MatAutocompleteModule} from '@angular/material';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n\n@NgModule({\n  declarations: [MultiSelectSearchAngular2Component],\n  imports: [\n    CommonModule,\n    MatCheckboxModule,\n    MatFormFieldModule,\n    MatListModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatIconModule\n  ],\n  exports: [MultiSelectSearchAngular2Component]\n})\nexport class MultiSelectSearchAngular2Module { }\n"],"names":[],"mappings":"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"}